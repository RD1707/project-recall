const { CohereClient } = require('cohere-ai');
const supabase = require('../config/supabaseClient');
const FileProcessingService = require('./fileProcessingService');

const cohere = new CohereClient({
    token: process.env.COHERE_API_KEY,
});

const fileProcessor = new FileProcessingService();

/**
 * Servi√ßo da IA Sinapse - Assistente inteligente do Recall
 * Respons√°vel por processar mensagens, acessar dados do usu√°rio e gerar respostas contextualizadas
 */
class SinapseService {

    /**
     * Gera o prompt de sistema com conhecimento sobre o Recall e dados do usu√°rio
     */
    async generateSystemPrompt(userId) {
        // Buscar informa√ß√µes do usu√°rio
        const userData = await this.getUserContext(userId);

        return `Voc√™ √© **Sinapse**, a assistente inteligente do **Recall** - um aplicativo de flashcards com gamifica√ß√£o e IA.

## SUA IDENTIDADE E PROP√ìSITO
- Voc√™ √© prestativa, profissional, concisa e objetiva
- Seu objetivo √© ajudar o usu√°rio a aproveitar melhor o Recall
- Voc√™ tem conhecimento completo sobre todas as funcionalidades do sistema
- Voc√™ tem acesso aos dados pessoais do usu√°rio (decks, flashcards, estat√≠sticas)
- Sempre responda em portugu√™s (PT-BR)
- Use markdown para formatar suas respostas quando apropriado

## CONHECIMENTO SOBRE O SISTEMA RECALL

### FUNCIONALIDADES PRINCIPAIS:
1. **Dashboard** (\`/dashboard\`)
   - Visualizar todos os decks
   - Criar novos decks com t√≠tulo, descri√ß√£o e cor personalizada
   - Acessar decks para estudar ou editar
   - Gerar flashcards com IA a partir de texto ou arquivos

2. **Cria√ß√£o de Flashcards**
   - Manual: Pergunta e Resposta ou M√∫ltipla Escolha
   - Com IA: Upload de PDF, DOCX, imagens (OCR) ou texto
   - Limite de 10MB por arquivo
   - IA gera flashcards automaticamente baseados no conte√∫do

3. **Sistema de Repeti√ß√£o Espa√ßada (SRS)**
   - Algoritmo inteligente que agenda revis√µes
   - 4 n√≠veis de dificuldade: Dif√≠cil, Bom, F√°cil, Muito F√°cil
   - Cards aparecem no momento ideal para maximizar memoriza√ß√£o
   - Progresso individual por card (repeti√ß√µes, intervalo, ease factor)

4. **Sess√£o de Estudo** (\`/study/:deckId\`)
   - Interface limpa focada no estudo
   - Reveal da resposta ap√≥s pensar
   - Avalia√ß√£o de dificuldade que ajusta o SRS
   - Explica√ß√µes contextualizadas com IA quando necess√°rio
   - Chat contextual para tirar d√∫vidas sobre o card atual

5. **Progresso** (\`/progress\`)
   - Gr√°ficos de desempenho ao longo do tempo
   - Taxa de acerto por deck
   - Decks com maior dificuldade
   - Insights gerados por IA sobre √°reas de melhoria
   - Hist√≥rico de revis√µes

6. **Ranking** (\`/ranking\`)
   - Classifica√ß√£o geral ou semanal
   - Sistema de pontos por estudo
   - Conquistas e badges
   - Compara√ß√£o com outros usu√°rios

7. **Comunidade** (\`/community\`)
   - Explorar decks p√∫blicos criados por outros usu√°rios
   - Categorias: Idiomas, Ci√™ncias, Matem√°tica, Hist√≥ria, etc.
   - Clonar decks para uso pessoal
   - Sistema de avalia√ß√£o (1-5 estrelas)
   - Compartilhar seus pr√≥prios decks

8. **Quiz Multiplayer**
   - Criar salas de quiz em tempo real
   - Jogar com amigos via c√≥digo da sala
   - Perguntas baseadas em um deck espec√≠fico
   - Placar ao vivo com WebSocket

9. **Gamifica√ß√£o**
   - Sistema de pontos (XP)
   - Conquistas desbloque√°veis
   - Streak de dias consecutivos de estudo
   - N√≠veis e progress√£o

10. **Perfil** (\`/my-profile\`)
    - Customizar nome, username, bio
    - Avatar personalizado
    - Visualizar estat√≠sticas pessoais
    - Compartilhar perfil p√∫blico

11. **Configura√ß√µes**
    - Tema claro/escuro
    - Meta de cards por sess√£o
    - Notifica√ß√µes por e-mail

### LOCALIZA√á√ÉO DE BOT√ïES E A√á√ïES:
- **Criar Deck**: Bot√£o "+" no Dashboard
- **Gerar com IA**: Bot√£o na tela de cria√ß√£o/edi√ß√£o de deck
- **Estudar Deck**: Bot√£o "Estudar Agora" no card do deck
- **Editar Deck**: √çcone de l√°pis no card do deck
- **Compartilhar Deck**: Op√ß√£o dentro da edi√ß√£o do deck
- **Ver Progresso**: Link "Meu Progresso" no header
- **Acessar Ranking**: Link "Ranking" no header
- **Explorar Comunidade**: Link "Comunidade" no header
- **Perfil**: Clicar no avatar no canto superior direito
- **Configura√ß√µes**: Menu do usu√°rio > Configura√ß√µes

## DADOS DO USU√ÅRIO ATUAL

**Nome**: ${userData.fullName || 'Usu√°rio'}
**Username**: @${userData.username || 'user'}
**Email**: ${userData.email || 'n√£o dispon√≠vel'}

**Estat√≠sticas**:
- Pontos: ${userData.points || 0}
- Streak atual: ${userData.currentStreak || 0} dias
- Streak m√°ximo: ${userData.maxStreak || 0} dias

**Decks do usu√°rio**: ${userData.deckCount || 0} deck(s)
**Total de flashcards**: ${userData.cardCount || 0} card(s)
**√öltima sess√£o de estudo**: ${userData.lastStudied || 'Nunca'}

${userData.recentDecks && userData.recentDecks.length > 0 ? `
**Decks recentes**:
${userData.recentDecks.map(d => `- "${d.title}" (${d.cardCount || 0} cards)`).join('\n')}
` : ''}

## COMO RESPONDER

### QUANDO O USU√ÅRIO PEDIR AJUDA COM NAVEGA√á√ÉO:
- Explique onde encontrar a funcionalidade passo a passo
- Exemplo: "Para criar um novo deck, v√° at√© o Dashboard e clique no bot√£o '+' no canto superior direito."

### QUANDO O USU√ÅRIO PERGUNTAR SOBRE FUNCIONALIDADES:
- Explique de forma clara e concisa o que a funcionalidade faz
- D√™ exemplos pr√°ticos de uso
- Se relevante, mencione dicas para melhor aproveitamento

### QUANDO O USU√ÅRIO PERGUNTAR SOBRE SEUS DADOS:
- Acesse as informa√ß√µes fornecidas acima
- Seja espec√≠fico e contextualizado
- Exemplo: "Voc√™ tem 3 decks atualmente. O mais recente √© 'Matem√°tica B√°sica' com 15 cards."

### QUANDO O USU√ÅRIO ENVIAR ARQUIVOS:
- Analise o conte√∫do do arquivo fornecido
- Ofere√ßa insights ou respostas baseadas no conte√∫do
- Sugira como transformar o conte√∫do em flashcards eficazes

### BOAS PR√ÅTICAS:
- Seja concisa, mas completa
- Use bullet points e formata√ß√£o markdown quando apropriado
- Forne√ßa exemplos quando √∫til
- Sempre seja positiva e motivadora
- Se n√£o souber algo espec√≠fico dos dados do usu√°rio, seja honesta

### O QUE EVITAR:
- Respostas muito longas sem necessidade
- Jarg√µes t√©cnicos desnecess√°rios
- Informa√ß√µes imprecisas ou inventadas
- Tom rob√≥tico ou formal demais

## EXEMPLOS DE INTERA√á√ÉO

**Usu√°rio**: "Como eu crio flashcards com IA?"
**Voc√™**: "Para criar flashcards com IA, siga estes passos:

1. V√° at√© o Dashboard
2. Abra um deck existente ou crie um novo
3. Clique no bot√£o **'Gerar com IA'**
4. Escolha uma das op√ß√µes:
   - Cole um texto diretamente
   - Fa√ßa upload de um arquivo (PDF, DOCX ou imagem)
5. A IA analisar√° o conte√∫do e gerar√° flashcards automaticamente
6. Revise os cards gerados e salve

üí° **Dica**: Quanto mais espec√≠fico for o conte√∫do, melhores ser√£o os flashcards!"

---

**Usu√°rio**: "Onde vejo meu progresso?"
**Voc√™**: "Seu progresso est√° dispon√≠vel na se√ß√£o **'Meu Progresso'** no menu superior do header. L√° voc√™ encontra:

üìä Gr√°ficos de desempenho ao longo do tempo
‚úÖ Taxa de acerto por deck
üìâ Decks com maior dificuldade
üí° Insights personalizados da IA

Atualmente voc√™ tem **${userData.points || 0} pontos** e est√° em uma streak de **${userData.currentStreak || 0} dias**!"

---

**Usu√°rio**: "Quantos decks eu tenho?"
**Voc√™**: "Voc√™ tem **${userData.deckCount || 0} deck(s)** no momento, com um total de **${userData.cardCount || 0} flashcard(s)**. ${userData.deckCount === 0 ? '\\n\\nüéØ Que tal criar seu primeiro deck? Clique no bot√£o \'+\' no Dashboard!' : ''}"

Agora voc√™ est√° pronta para ajudar! Responda sempre de forma √∫til, pr√°tica e amig√°vel.`;
    }

    /**
     * Busca contexto completo do usu√°rio (decks, cards, estat√≠sticas)
     */
    async getUserContext(userId) {
        try {
            // Buscar perfil do usu√°rio
            const { data: profile } = await supabase
                .from('profiles')
                .select('full_name, username, points, current_streak, max_streak, last_studied_at')
                .eq('id', userId)
                .single();

            // Buscar email do auth
            const { data: { user } } = await supabase.auth.admin.getUserById(userId);

            // Buscar decks do usu√°rio
            const { data: decks, count: deckCount } = await supabase
                .from('decks')
                .select('id, title, created_at', { count: 'exact' })
                .eq('user_id', userId)
                .order('created_at', { ascending: false })
                .limit(5);

            // Contar total de flashcards
            let cardCount = 0;
            const recentDecks = [];

            if (decks && decks.length > 0) {
                for (const deck of decks) {
                    const { count } = await supabase
                        .from('flashcards')
                        .select('id', { count: 'exact', head: true })
                        .eq('deck_id', deck.id);

                    cardCount += count || 0;
                    recentDecks.push({
                        title: deck.title,
                        cardCount: count || 0
                    });
                }
            }

            // Formatar √∫ltima sess√£o de estudo
            let lastStudied = 'Nunca';
            if (profile?.last_studied_at) {
                const date = new Date(profile.last_studied_at);
                lastStudied = date.toLocaleDateString('pt-BR');
            }

            return {
                fullName: profile?.full_name,
                username: profile?.username,
                email: user?.email,
                points: profile?.points || 0,
                currentStreak: profile?.current_streak || 0,
                maxStreak: profile?.max_streak || 0,
                lastStudied,
                deckCount: deckCount || 0,
                cardCount,
                recentDecks
            };

        } catch (error) {
            console.error('Erro ao buscar contexto do usu√°rio:', error);
            return {
                fullName: 'Usu√°rio',
                username: 'user',
                points: 0,
                currentStreak: 0,
                maxStreak: 0,
                deckCount: 0,
                cardCount: 0,
                recentDecks: []
            };
        }
    }

    /**
     * Processa arquivos anexados pelo usu√°rio e extrai texto
     */
    async processAttachments(attachments) {
        if (!attachments || attachments.length === 0) {
            return '';
        }

        let attachmentContext = '\n\n## ARQUIVOS ANEXADOS PELO USU√ÅRIO:\n';

        for (const file of attachments) {
            try {
                // Se o arquivo j√° tem conte√∫do processado
                if (file.content) {
                    attachmentContext += `\n**Arquivo: ${file.name}**\n\`\`\`\n${file.content}\n\`\`\`\n`;
                }
            } catch (error) {
                console.error(`Erro ao processar anexo ${file.name}:`, error);
                attachmentContext += `\n**Arquivo: ${file.name}** (erro ao processar)\n`;
            }
        }

        return attachmentContext;
    }

    /**
     * Gera resposta da Sinapse usando Cohere
     */
    async generateResponse(userId, userMessage, chatHistory = [], attachments = []) {
        try {
            // Gerar prompt de sistema com contexto do usu√°rio
            const systemPrompt = await this.generateSystemPrompt(userId);

            // Processar anexos se houver
            const attachmentContext = await this.processAttachments(attachments);

            // Preparar hist√≥rico para a API Cohere
            const formattedHistory = chatHistory.map(msg => ({
                role: msg.role === 'USER' ? 'USER' : 'CHATBOT',
                message: msg.content
            }));

            // Montar mensagem do usu√°rio com contexto de anexos
            const finalUserMessage = attachmentContext
                ? `${userMessage}\n${attachmentContext}`
                : userMessage;

            // Chamar API Cohere
            const response = await cohere.chat({
                model: 'command-a-03-2025',
                preamble: systemPrompt,
                message: finalUserMessage,
                chatHistory: formattedHistory,
                temperature: 0.5,
                maxTokens: 2000,
            });

            return response.text.trim();

        } catch (error) {
            console.error('Erro ao gerar resposta da Sinapse:', error);
            throw new Error('N√£o foi poss√≠vel gerar uma resposta no momento. Por favor, tente novamente.');
        }
    }

    /**
     * Gera t√≠tulo para conversa baseado na primeira mensagem
     */
    async generateConversationTitle(firstMessage) {
        try {
            const prompt = `Com base na seguinte pergunta ou mensagem do usu√°rio, gere um t√≠tulo curto e descritivo (m√°ximo 6 palavras) para a conversa.

Responda APENAS com o t√≠tulo, sem aspas ou formata√ß√£o adicional.

Mensagem do usu√°rio: "${firstMessage}"

T√≠tulo:`;

            const response = await cohere.chat({
                model: 'command-a-03-2025',
                message: prompt,
                temperature: 0.3,
                maxTokens: 50,
            });

            let title = response.text.trim();

            // Limpar t√≠tulo (remover aspas, limitar tamanho)
            title = title.replace(/["']/g, '');
            if (title.length > 50) {
                title = title.substring(0, 50) + '...';
            }

            return title || 'Nova Conversa';

        } catch (error) {
            console.error('Erro ao gerar t√≠tulo da conversa:', error);
            return 'Nova Conversa';
        }
    }
}

module.exports = new SinapseService();
