name: Security Scanning

on:
  schedule:
    - cron: '0 6 * * 1' 
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Run npm audit (Backend)
        run: |
          cd backend
          npm audit --audit-level=moderate --json > npm-audit-backend.json || true

      - name: Run npm audit (Frontend)
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-frontend.json || true

      - name: Upload audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: |
            backend/npm-audit-backend.json
            frontend/npm-audit-frontend.json

  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  sast-scan:
    name: Static Analysis Security Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          queries: security-extended

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

      - name: Run Semgrep
        uses: securecodewarrior/github-action-add-sarif@v1
        with:
          sarif-file: semgrep.sarif
        continue-on-error: true

      - name: ESLint Security Rules
        run: |
          cd frontend
          npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-security.sarif || true
          cd ../backend
          npx eslint . --ext .js,.jsx,.ts,.tsx --format @microsoft/eslint-formatter-sarif --output-file eslint-security.sarif || true

      - name: Upload SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: |
            frontend/eslint-security.sarif
            backend/eslint-security.sarif
        continue-on-error: true

  docker-security:
    name: Docker Security Scan
    runs-on: ubuntu-latest

    strategy:
      matrix:
        dockerfile: [backend/Dockerfile, frontend/Dockerfile]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linter)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: ${{ matrix.dockerfile }}
          format: sarif
          output-file: hadolint-${{ matrix.dockerfile }}.sarif

      - name: Upload Hadolint results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: hadolint-${{ matrix.dockerfile }}.sarif

      - name: Build Docker image for scanning
        run: |
          SERVICE=$(dirname ${{ matrix.dockerfile }})
          docker build -t security-scan:$SERVICE $SERVICE

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'security-scan:${{ matrix.dockerfile }}'
          format: 'sarif'
          output: 'trivy-${{ matrix.dockerfile }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-${{ matrix.dockerfile }}.sarif'

  infrastructure-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov (IaC Security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,docker_compose
          output_format: sarif
          output_file_path: checkov.sarif

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov.sarif

      - name: Docker Compose Security Check
        run: |
          echo "Checking Docker Compose security..."
          # Check for insecure configurations
          if grep -r "privileged.*true" docker-compose*.yml; then
            echo "Warning: Privileged containers found"
          fi
          if grep -r "user.*root" docker-compose*.yml; then
            echo "Warning: Root user containers found"
          fi

  license-scan:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Generate license report
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --production --json > license-report.json

      - name: Upload license report
        uses: actions/upload-artifact@v4
        with:
          name: license-report
          path: license-report.json

  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, secret-scan, sast-scan, docker-security, infrastructure-scan, license-scan]
    if: always()

    steps:
      - name: Generate security summary
        run: |
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.dependency-scan.result }}" == "success" ]]; then
            echo "- Dependency vulnerability scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Dependency vulnerability scan failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "- Secret scanning completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Secret scanning failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.sast-scan.result }}" == "success" ]]; then
            echo "- Static analysis security testing completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Static analysis security testing failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.docker-security.result }}" == "success" ]]; then
            echo "- Docker security scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Docker security scan failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.infrastructure-scan.result }}" == "success" ]]; then
            echo "- Infrastructure security scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Infrastructure security scan failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.license-scan.result }}" == "success" ]]; then
            echo "- License compliance check completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- License compliance check failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Notify security team
        if: failure()
        run: |
          echo "Security scan failures detected - notifying security team"
          # Add notification logic here