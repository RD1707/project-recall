name: Performance Testing

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * 0' 
  workflow_dispatch:
    inputs:
      load_test_duration:
        description: 'Load test duration (minutes)'
        required: false
        default: '5'
        type: string

env:
  NODE_VERSION: '18'

jobs:
  lighthouse:
    name: Lighthouse Performance Audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm run install:all

      - name: Build frontend
        run: |
          cd frontend && npm run build

      - name: Start services
        run: |
          cp .env.example .env
          make dev-d
          sleep 60 # Wait for services to start

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: './.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Upload Lighthouse results
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci

      - name: Cleanup
        if: always()
        run: make clean

  load-test:
    name: Load Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start services
        run: |
          cp .env.example .env
          make dev-d
          sleep 60

      - name: Run K6 Load Tests
        uses: grafana/k6-action@v0.3.1
        with:
          filename: tests/performance/load-test.js
        env:
          DURATION: ${{ github.event.inputs.load_test_duration || '5' }}m
          VUS: 50
          TARGET_URL: http://localhost:3001

      - name: Upload K6 results
        uses: actions/upload-artifact@v4
        with:
          name: k6-results
          path: |
            results.json
            summary.json

      - name: Cleanup
        if: always()
        run: make clean

  api-performance:
    name: API Performance Testing
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Start backend services
        run: |
          cp .env.example .env
          docker-compose up -d postgres redis backend
          sleep 45

      - name: Run Artillery API tests
        run: |
          npm install -g artillery
          artillery run tests/performance/api-test.yml --output api-performance.json

      - name: Generate Artillery report
        run: |
          artillery report api-performance.json --output api-performance-report.html

      - name: Upload API performance results
        uses: actions/upload-artifact@v4
        with:
          name: api-performance-results
          path: |
            api-performance.json
            api-performance-report.html

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v

  database-performance:
    name: Database Performance Testing
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: recall_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Run database performance tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/recall_test
        run: |
          echo "Running database performance tests..."
          # Add your database performance tests here
          # Example: pgbench, custom query performance tests, etc.

  bundle-analysis:
    name: Bundle Size Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend && npm ci

      - name: Build and analyze bundle
        run: |
          cd frontend
          npm run build
          npx webpack-bundle-analyzer dist/assets/*.js --mode static --report bundle-report.html --no-open

      - name: Bundle size check
        run: |
          cd frontend
          BUNDLE_SIZE=$(du -sh dist | cut -f1)
          echo "Bundle size: $BUNDLE_SIZE"
          echo "BUNDLE_SIZE=$BUNDLE_SIZE" >> $GITHUB_ENV

      - name: Upload bundle analysis
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: |
            frontend/bundle-report.html
            frontend/dist

      - name: Comment bundle size on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const bundleSize = process.env.BUNDLE_SIZE;
            const comment = `## Bundle Size Report

            **Bundle Size:** ${bundleSize}

            [View detailed bundle analysis in artifacts](${context.payload.pull_request.html_url}/checks)`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  performance-summary:
    name: Performance Summary
    runs-on: ubuntu-latest
    needs: [lighthouse, load-test, api-performance, database-performance, bundle-analysis]
    if: always()

    steps:
      - name: Generate performance summary
        run: |
          echo "## Performance Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.lighthouse.result }}" == "success" ]]; then
            echo "- Lighthouse performance audit completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Lighthouse performance audit failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.load-test.result }}" == "success" ]]; then
            echo "- Load testing completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Load testing failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.api-performance.result }}" == "success" ]]; then
            echo "- API performance testing completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- API performance testing failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.database-performance.result }}" == "success" ]]; then
            echo "- Database performance testing completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Database performance testing failed" >> $GITHUB_STEP_SUMMARY
          fi

          if [[ "${{ needs.bundle-analysis.result }}" == "success" ]]; then
            echo "- Bundle size analysis completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "- Bundle size analysis failed" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check individual job results for detailed performance metrics." >> $GITHUB_STEP_SUMMARY